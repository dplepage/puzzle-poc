{"version":3,"sources":["views/puzz2_1.tsx"],"names":["Square","onClick","value","className","style","width","height","Board","squares","renderSquare","i","Game","props","state","history","Array","fill","stepNumber","xIsNext","this","slice","length","calculateWinner","setState","concat","winner","onEnd","step","status","current","moves","map","move","desc","key","jumpTo","handleClick","React","Component","lines","a","b","c","engine","data","submit"],"mappings":"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","file":"static/js/puzz2_1.bb5db337.chunk.js","sourcesContent":["import React from 'react';\nimport {ViewProps} from '../engine/interface'\n\ntype Symbol = \"X\" | \"O\" | null\n\nconst Square: React.FC<{value:Symbol, onClick:()=>void}> = ({onClick, value}) => (\n  <button className=\"square\" onClick={onClick} style={{width:\"25px\", height:\"25px\"}}>\n    {value}&nbsp;\n  </button>\n);\n\nconst Board: React.FC<{squares:Symbol[], onClick:(i:number)=>void}> = ({squares, onClick}) => {\n  const renderSquare = (i:number) => <Square\n    value={squares[i]}\n    onClick={() => onClick(i)}\n  />\n  return       <div>\n        <div className=\"board-row\">\n          {renderSquare(0)}\n          {renderSquare(1)}\n          {renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(3)}\n          {renderSquare(4)}\n          {renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(6)}\n          {renderSquare(7)}\n          {renderSquare(8)}\n        </div>\n      </div>\n}\n\ninterface GameState {\n  history: {squares:Symbol[]}[],\n  stepNumber: number,\n  xIsNext: boolean,\n}\n\ninterface GameProps {\n  onEnd: (winner:Symbol)=>void\n}\n\nclass Game extends React.Component<GameProps, GameState> {\n  constructor(props:GameProps) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i:number) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n    let winner = calculateWinner(squares)\n    if (winner){\n      this.props.onEnd(winner)\n    }\n  }\n\n  jumpTo(step:number) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={i => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares:Symbol[]) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\nfunction Component({engine, data}:ViewProps) {\n  return <>\n    <p>This puzzle can have pretty much anything in it, so I just copied in a tic-tac-toe game from a react demo.</p>\n    <p>Ending the game will autosubmit the answer \"TICTACS\".</p>\n    <p>In practice we probably don't want to do any sort of autosubmission, but I wanted to see if it would work.</p>\n    <Game onEnd={(winner)=>{engine.submit(\"puzz2_1\", \"TICTACS\")}}/>\n  </>\n}\n\nexport default Component;\n"],"sourceRoot":""}